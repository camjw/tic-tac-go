// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package lib

import (
	"sync"
)

var (
	lockBoardToPlayMockClone         sync.RWMutex
	lockBoardToPlayMockGameOver      sync.RWMutex
	lockBoardToPlayMockGetValidMoves sync.RWMutex
	lockBoardToPlayMockPlayMove      sync.RWMutex
	lockBoardToPlayMockPrint         sync.RWMutex
	lockBoardToPlayMockWhoseTurn     sync.RWMutex
	lockBoardToPlayMockWinner        sync.RWMutex
)

// BoardToPlayMock is a mock implementation of BoardToPlay.
//
//     func TestSomethingThatUsesBoardToPlay(t *testing.T) {
//
//         // make and configure a mocked BoardToPlay
//         mockedBoardToPlay := &BoardToPlayMock{
//             CloneFunc: func() Board {
// 	               panic("TODO: mock out the Clone method")
//             },
//             GameOverFunc: func() bool {
// 	               panic("TODO: mock out the GameOver method")
//             },
//             GetValidMovesFunc: func() []int {
// 	               panic("TODO: mock out the GetValidMoves method")
//             },
//             PlayMoveFunc: func(in1 int, in2 string)  {
// 	               panic("TODO: mock out the PlayMove method")
//             },
//             PrintFunc: func()  {
// 	               panic("TODO: mock out the Print method")
//             },
//             WhoseTurnFunc: func() string {
// 	               panic("TODO: mock out the WhoseTurn method")
//             },
//             WinnerFunc: func(in1 string) bool {
// 	               panic("TODO: mock out the Winner method")
//             },
//         }
//
//         // TODO: use mockedBoardToPlay in code that requires BoardToPlay
//         //       and then make assertions.
//
//     }
type BoardToPlayMock struct {
	// CloneFunc mocks the Clone method.
	CloneFunc func() Board

	// GameOverFunc mocks the GameOver method.
	GameOverFunc func() bool

	// GetValidMovesFunc mocks the GetValidMoves method.
	GetValidMovesFunc func() []int

	// PlayMoveFunc mocks the PlayMove method.
	PlayMoveFunc func(in1 int, in2 string)

	// PrintFunc mocks the Print method.
	PrintFunc func()

	// WhoseTurnFunc mocks the WhoseTurn method.
	WhoseTurnFunc func() string

	// WinnerFunc mocks the Winner method.
	WinnerFunc func(in1 string) bool

	// calls tracks calls to the methods.
	calls struct {
		// Clone holds details about calls to the Clone method.
		Clone []struct {
		}
		// GameOver holds details about calls to the GameOver method.
		GameOver []struct {
		}
		// GetValidMoves holds details about calls to the GetValidMoves method.
		GetValidMoves []struct {
		}
		// PlayMove holds details about calls to the PlayMove method.
		PlayMove []struct {
			// In1 is the in1 argument value.
			In1 int
			// In2 is the in2 argument value.
			In2 string
		}
		// Print holds details about calls to the Print method.
		Print []struct {
		}
		// WhoseTurn holds details about calls to the WhoseTurn method.
		WhoseTurn []struct {
		}
		// Winner holds details about calls to the Winner method.
		Winner []struct {
			// In1 is the in1 argument value.
			In1 string
		}
	}
}

// Clone calls CloneFunc.
func (mock *BoardToPlayMock) Clone() Board {
	if mock.CloneFunc == nil {
		panic("BoardToPlayMock.CloneFunc: method is nil but BoardToPlay.Clone was just called")
	}
	callInfo := struct {
	}{}
	lockBoardToPlayMockClone.Lock()
	mock.calls.Clone = append(mock.calls.Clone, callInfo)
	lockBoardToPlayMockClone.Unlock()
	return mock.CloneFunc()
}

// CloneCalls gets all the calls that were made to Clone.
// Check the length with:
//     len(mockedBoardToPlay.CloneCalls())
func (mock *BoardToPlayMock) CloneCalls() []struct {
} {
	var calls []struct {
	}
	lockBoardToPlayMockClone.RLock()
	calls = mock.calls.Clone
	lockBoardToPlayMockClone.RUnlock()
	return calls
}

// GameOver calls GameOverFunc.
func (mock *BoardToPlayMock) GameOver() bool {
	if mock.GameOverFunc == nil {
		panic("BoardToPlayMock.GameOverFunc: method is nil but BoardToPlay.GameOver was just called")
	}
	callInfo := struct {
	}{}
	lockBoardToPlayMockGameOver.Lock()
	mock.calls.GameOver = append(mock.calls.GameOver, callInfo)
	lockBoardToPlayMockGameOver.Unlock()
	return mock.GameOverFunc()
}

// GameOverCalls gets all the calls that were made to GameOver.
// Check the length with:
//     len(mockedBoardToPlay.GameOverCalls())
func (mock *BoardToPlayMock) GameOverCalls() []struct {
} {
	var calls []struct {
	}
	lockBoardToPlayMockGameOver.RLock()
	calls = mock.calls.GameOver
	lockBoardToPlayMockGameOver.RUnlock()
	return calls
}

// GetValidMoves calls GetValidMovesFunc.
func (mock *BoardToPlayMock) GetValidMoves() []int {
	if mock.GetValidMovesFunc == nil {
		panic("BoardToPlayMock.GetValidMovesFunc: method is nil but BoardToPlay.GetValidMoves was just called")
	}
	callInfo := struct {
	}{}
	lockBoardToPlayMockGetValidMoves.Lock()
	mock.calls.GetValidMoves = append(mock.calls.GetValidMoves, callInfo)
	lockBoardToPlayMockGetValidMoves.Unlock()
	return mock.GetValidMovesFunc()
}

// GetValidMovesCalls gets all the calls that were made to GetValidMoves.
// Check the length with:
//     len(mockedBoardToPlay.GetValidMovesCalls())
func (mock *BoardToPlayMock) GetValidMovesCalls() []struct {
} {
	var calls []struct {
	}
	lockBoardToPlayMockGetValidMoves.RLock()
	calls = mock.calls.GetValidMoves
	lockBoardToPlayMockGetValidMoves.RUnlock()
	return calls
}

// PlayMove calls PlayMoveFunc.
func (mock *BoardToPlayMock) PlayMove(in1 int, in2 string) {
	if mock.PlayMoveFunc == nil {
		panic("BoardToPlayMock.PlayMoveFunc: method is nil but BoardToPlay.PlayMove was just called")
	}
	callInfo := struct {
		In1 int
		In2 string
	}{
		In1: in1,
		In2: in2,
	}
	lockBoardToPlayMockPlayMove.Lock()
	mock.calls.PlayMove = append(mock.calls.PlayMove, callInfo)
	lockBoardToPlayMockPlayMove.Unlock()
	mock.PlayMoveFunc(in1, in2)
}

// PlayMoveCalls gets all the calls that were made to PlayMove.
// Check the length with:
//     len(mockedBoardToPlay.PlayMoveCalls())
func (mock *BoardToPlayMock) PlayMoveCalls() []struct {
	In1 int
	In2 string
} {
	var calls []struct {
		In1 int
		In2 string
	}
	lockBoardToPlayMockPlayMove.RLock()
	calls = mock.calls.PlayMove
	lockBoardToPlayMockPlayMove.RUnlock()
	return calls
}

// Print calls PrintFunc.
func (mock *BoardToPlayMock) Print() {
	if mock.PrintFunc == nil {
		panic("BoardToPlayMock.PrintFunc: method is nil but BoardToPlay.Print was just called")
	}
	callInfo := struct {
	}{}
	lockBoardToPlayMockPrint.Lock()
	mock.calls.Print = append(mock.calls.Print, callInfo)
	lockBoardToPlayMockPrint.Unlock()
	mock.PrintFunc()
}

// PrintCalls gets all the calls that were made to Print.
// Check the length with:
//     len(mockedBoardToPlay.PrintCalls())
func (mock *BoardToPlayMock) PrintCalls() []struct {
} {
	var calls []struct {
	}
	lockBoardToPlayMockPrint.RLock()
	calls = mock.calls.Print
	lockBoardToPlayMockPrint.RUnlock()
	return calls
}

// WhoseTurn calls WhoseTurnFunc.
func (mock *BoardToPlayMock) WhoseTurn() string {
	if mock.WhoseTurnFunc == nil {
		panic("BoardToPlayMock.WhoseTurnFunc: method is nil but BoardToPlay.WhoseTurn was just called")
	}
	callInfo := struct {
	}{}
	lockBoardToPlayMockWhoseTurn.Lock()
	mock.calls.WhoseTurn = append(mock.calls.WhoseTurn, callInfo)
	lockBoardToPlayMockWhoseTurn.Unlock()
	return mock.WhoseTurnFunc()
}

// WhoseTurnCalls gets all the calls that were made to WhoseTurn.
// Check the length with:
//     len(mockedBoardToPlay.WhoseTurnCalls())
func (mock *BoardToPlayMock) WhoseTurnCalls() []struct {
} {
	var calls []struct {
	}
	lockBoardToPlayMockWhoseTurn.RLock()
	calls = mock.calls.WhoseTurn
	lockBoardToPlayMockWhoseTurn.RUnlock()
	return calls
}

// Winner calls WinnerFunc.
func (mock *BoardToPlayMock) Winner(in1 string) bool {
	if mock.WinnerFunc == nil {
		panic("BoardToPlayMock.WinnerFunc: method is nil but BoardToPlay.Winner was just called")
	}
	callInfo := struct {
		In1 string
	}{
		In1: in1,
	}
	lockBoardToPlayMockWinner.Lock()
	mock.calls.Winner = append(mock.calls.Winner, callInfo)
	lockBoardToPlayMockWinner.Unlock()
	return mock.WinnerFunc(in1)
}

// WinnerCalls gets all the calls that were made to Winner.
// Check the length with:
//     len(mockedBoardToPlay.WinnerCalls())
func (mock *BoardToPlayMock) WinnerCalls() []struct {
	In1 string
} {
	var calls []struct {
		In1 string
	}
	lockBoardToPlayMockWinner.RLock()
	calls = mock.calls.Winner
	lockBoardToPlayMockWinner.RUnlock()
	return calls
}
